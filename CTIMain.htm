<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>SAP Service Cloud Main Page</title>

  <!-- SIPML5 API:
    DEBUG VERSION: 'SIPml-api.js'
    RELEASE VERSION: 'release/SIPml-api.js'
  -->
  <script src="https://sources.crisan52.now.sh/release/SIPml-api.js" type="text/javascript"> </script>
  <link href="https://sources.crisan52.now.sh/assets/css/bootstrap.css" rel="stylesheet" />

  <!-- VERSION PARA PRODUCCION -->
  <!-- BORRAR carpeta SRC que es para DEBUG -->

<script type="text/javascript">

    var CONSTANT = {
        CTI_PAYLOAD: "cti_payload",
        CTI_PAYLOAD_URL: "/ctipayload/"
    };

    var CONSTANT_OUT = {
        COD_CID: "SAPCOD",
        COD_DATA: "DATA"
    };

    var xmlhttp;

    function pushMsg(ctidata) {
        console.log('ctidata ' + ctidata)
        if (ctidata.length > 0) {
            window.parent.postMessage(ctidata, '*');
        }
        if (ctidata == null) {
            ctidata = getFromLocalStorage(CONSTANT.CTI_PAYLOAD);
            alert(" From storage: " + ctidata);
        }
    }

    function setInLocalStorage(key, value) {
        localStorage.setItem(key, value);
    }

    function getFromLocalStorage(key) {
        value = localStorage.getItem(key);
        return value;
    }

    //Get XMLHTTPRequest object
    function getXMLHttpReq() {
        var xmlhttp;
        if (window.XMLHttpRequest) { // code for IE7+, Firefox, Chrome, Opera, Safari
            xmlhttp = new XMLHttpRequest();
        } else { // code for IE6, IE5
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        if (!xmlhttp) {
            alert("XMLHttp not supported on this platform");
        }
        //console.log(xmlhttp)
        return xmlhttp;
    }

    function constructURI() {
            //This URI should be the one getting the data from server. figure out how to get this dynamically
        var BaseUri = location.href.split(location.pathname)[0];
        var uri = BaseUri + CONSTANT.CTI_PAYLOAD_URL;
        return uri;
    }

    function pushXMLPayloadToCOD(xmlhttp) {
        var payload;
        xmlhttp.onreadystatechange = function () {
            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                try {
                    payload = xmlhttp.responseText;
                } catch (e) {
                    var response = "Aborted";
                }
                pushMsg(payload);
                setInLocalStorage(CONSTANT.CTI_PAYLOAD, payload);
            }
        }
        var payloaduri = constructURI();
        sendRequestToServer(xmlhttp, payloaduri);
    }

    function bindEvent(e, eventName, eventHandler) {
        if (e.addEventListener) {
            e.addEventListener(eventName, eventHandler, false);
        } else if (e.attachEvent) {
            e.attachEvent('on' + eventName, eventHandler);
        }
    }

    bindEvent(window, "message", sendOutboundRequestToServer);

    function sendOutboundRequestToServer(contextParams) {
        if (event.source != window) {
            var obj = contextParams.data;
            var url = "/?CID=" + CONSTANT_OUT.COD_CID + "&" + CONSTANT_OUT.COD_DATA + "=" + encodeURIComponent(JSON.stringify(obj));
            postToCTIAdapter(url);
        }
    }

    function postToCTIAdapter(url) {
        var xmlHTTPReqOut = getXMLHttpReq();
        if (xmlHTTPReqOut) {
            var BaseUri = location.href.split(location.pathname)[0];
            var uri = BaseUri + url;
            xmlHTTPReqOut.open("GET", uri, true);
            xmlHTTPReqOut.setRequestHeader("Content-type", "application/json");
            xmlHTTPReqOut.send();
        }
    }

    function sendRequestToServer(xmlhttp, uri) {
            //Open connection to server
            xmlhttp.open("GET", uri, true);
            
            //send request to server
            xmlhttp.send();

            //Start all over again
            setTimeout('initialize()', 1000); 
    }

    function initialize() {
        if (xmlhttp) {
            xmlhttp.abort();
        }
      xmlhttp = getXMLHttpReq();
      if (xmlhttp) {
        //console.log('pushXMLPayloadToCOD')
        pushXMLPayloadToCOD(xmlhttp);
      }
    }




    function inicializar() {
        console.log('==============INICIALIZA EL WIDGET==================')
        //console.log(btnRegister.disabled);
        initialize();
        initWebPhone();
        //Realiza el login de forma automatica
        //sipRegister();
        //console.log(btnRegister.disabled);
    }



    //=====================WEBPHONE JS=====================
    // to avoid caching
    //if (window.location.href.indexOf("svn=") == -1) {
    //    window.location.href += (window.location.href.indexOf("?") == -1 ? "svn=236" : "&svn=229");
    //}
    
    //Definir credenciales para WEBPHONE
    var txtDisplayName = "Christian S";
    var txtPrivateIdentity = "611";
    var txtPublicIdentity = "sip:611@192.168.1.115";
    var txtPassword = "xyz123";
    var txtRealm = "192.168.1.115";
    //var txtPhoneNumber = "120";

    //Credenciales avanzadas
    var txtSocketWS = "ws://192.168.1.115:8088/asterisk/ws";
    var bDisableCallBtnOptions = true;
    var disableVideo = true;
    var enableRTCWeb = true;

    var sTransferNumber;
    var oRingTone, oRingbackTone;
    var oSipStack, oSipSessionRegister, oSipSessionCall, oSipSessionTransferCall;
    var audioRemote;
    var bFullScreen = false;
    var oNotifICall;
    var oConfigCall;
    var oReadyStateTimer;

    C =
    {
      divKeyPadWidth: 220
    };

    //window.onload = function () {
    function initWebPhone() {
      console.log('==========INICIALIZA WEBPHONE=============')
      console.log('LOCAL ' + localStorage.getItem('org.doubango.identity.display_name'))

      saveAdvancedCredentials();
      window.console && window.console.info && window.console.info("location=" + window.location);
      audioRemote = document.getElementById("audio_remote");

      document.onkeyup = onKeyUp;
      document.body.onkeyup = onKeyUp;
      divCallCtrl.onmousemove = onDivCallCtrlMouseMove;

      // set debug level
      SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");

      loadCredentials();
      loadCallOptions();

      // Initialize call button
      uiBtnCallSetText("Call");

      var getPVal = function (PName) {
        var query = window.location.search.substring(1);
        var vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
          var pair = vars[i].split('=');
          if (decodeURIComponent(pair[0]) === PName) {
            return decodeURIComponent(pair[1]);
          }
        }
        return null;
      }

      var preInit = function () {
        // set default webrtc type (before initialization)
        var s_webrtc_type = getPVal("wt");
        var s_fps = getPVal("fps");
        var s_mvs = getPVal("mvs"); // maxVideoSize
        var s_mbwu = getPVal("mbwu"); // maxBandwidthUp (kbps)
        var s_mbwd = getPVal("mbwd"); // maxBandwidthUp (kbps)
        var s_za = getPVal("za"); // ZeroArtifacts
        var s_ndb = getPVal("ndb"); // NativeDebug

        if (s_webrtc_type) SIPml.setWebRtcType(s_webrtc_type);

        // initialize SIPML5
        SIPml.init(postInit);

        // set other options after initialization
        if (s_fps) SIPml.setFps(parseFloat(s_fps));
        if (s_mvs) SIPml.setMaxVideoSize(s_mvs);
        if (s_mbwu) SIPml.setMaxBandwidthUp(parseFloat(s_mbwu));
        if (s_mbwd) SIPml.setMaxBandwidthDown(parseFloat(s_mbwd));
        if (s_za) SIPml.setZeroArtifacts(s_za === "true");
        if (s_ndb == "true") SIPml.startNativeDebug();

        //var rinningApps = SIPml.getRunningApps();
        //var _rinningApps = Base64.decode(rinningApps);
        //tsk_utils_log_info(_rinningApps);
      }

      oReadyStateTimer = setInterval(function () {
        if (document.readyState === "complete") {
          clearInterval(oReadyStateTimer);
          // initialize SIPML5
          preInit();
        }
      },
        500);

      /*if (document.readyState === "complete") {
          preInit();
      }
      else {
          document.onreadystatechange = function () {
               if (document.readyState === "complete") {
                  preInit();
              }
          }
     }*/
    };

    function postInit() {
      // check for WebRTC support
      if (!SIPml.isWebRtcSupported()) {
        // is it chrome?
        if (SIPml.getNavigatorFriendlyName() == 'chrome') {
          if (confirm("You're using an old Chrome version or WebRTC is not enabled.\nDo you want to see how to enable WebRTC?")) {
            window.location = 'http://www.webrtc.org/running-the-demos';
          }
          else {
            window.location = "index.html";
          }
          return;
        }
        else {
          if (confirm("webrtc-everywhere extension is not installed. Do you want to install it?\nIMPORTANT: You must restart your browser after the installation.")) {
            window.location = 'https://github.com/sarandogou/webrtc-everywhere';
          }
          else {
            // Must do nothing: give the user the chance to accept the extension
            // window.location = "index.html";
          }
        }
      }

      // checks for WebSocket support
      if (!SIPml.isWebSocketSupported()) {
        if (confirm('Your browser don\'t support WebSockets.\nDo you want to download a WebSocket-capable browser?')) {
          window.location = 'https://www.google.com/intl/en/chrome/browser/';
        }
        else {
          window.location = "index.html";
        }
        return;
      }

      // FIXME: displays must be per session

      if (!SIPml.isWebRtcSupported()) {
        if (confirm('Your browser don\'t support WebRTC.\naudio/video calls will be disabled.\nDo you want to download a WebRTC-capable browser?')) {
          window.location = 'https://www.google.com/intl/en/chrome/browser/';
        }
      }

      btnRegister.disabled = false;
      document.body.style.cursor = 'default';
      oConfigCall = {
        audio_remote: audioRemote,
        screencast_window_id: 0x00000000, // entire desktop
        bandwidth: { audio: undefined, video: undefined },
        video_size: { minWidth: undefined, minHeight: undefined, maxWidth: undefined, maxHeight: undefined },
        events_listener: { events: '*', listener: onSipEventSession },
        sip_caps: [
          { name: '+g.oma.sip-im' },
          { name: 'language', value: '\"en,fr\"' }
        ]
      };
    }


    function loadCallOptions() {
      if (window.localStorage) {
        var s_value;
        if ((s_value = window.localStorage.getItem('org.doubango.call.phone_number'))) txtPhoneNumber.value = s_value;
      }
    }

    function saveCallOptions() {
      if (window.localStorage) {
        window.localStorage.setItem('org.doubango.call.phone_number', txtPhoneNumber.value);
      }
    }

    function loadCredentials() {
      /*if (window.localStorage) {
        // IE retuns 'null' if not defined
        var s_value;
        if ((s_value = window.localStorage.getItem('org.doubango.identity.display_name'))) txtDisplayName.value = s_value;
        if ((s_value = window.localStorage.getItem('org.doubango.identity.impi'))) txtPrivateIdentity.value = s_value;
        if ((s_value = window.localStorage.getItem('org.doubango.identity.impu'))) txtPublicIdentity.value = s_value;
        if ((s_value = window.localStorage.getItem('org.doubango.identity.password'))) txtPassword.value = s_value;
        if ((s_value = window.localStorage.getItem('org.doubango.identity.realm'))) txtRealm.value = s_value;
      }
      else {*/
      //txtDisplayName.value = "Usuario"
      //txtPrivateIdentity.value = "611";
      //txtPublicIdentity.value = "sip:611@192.168.1.115";
      //txtPassword.value = "passwd";
      //txtRealm.value = "192.168.1.115";
      //txtPhoneNumber.value = "120";
      //}
    };

    function saveCredentials() {
      if (window.localStorage) {
        window.localStorage.setItem('org.doubango.identity.display_name', txtDisplayName);
        window.localStorage.setItem('org.doubango.identity.impi', txtPrivateIdentity);
        window.localStorage.setItem('org.doubango.identity.impu', txtPublicIdentity);
        window.localStorage.setItem('org.doubango.identity.password', txtPassword);
        window.localStorage.setItem('org.doubango.identity.realm', txtRealm);
      }
    };

    function saveAdvancedCredentials() {
       if (window.localStorage) {
        window.localStorage.setItem('org.doubango.expert.websocket_server_url', txtSocketWS);
        window.localStorage.setItem('org.doubango.expert.disable_callbtn_options', bDisableCallBtnOptions);
        window.localStorage.setItem('org.doubango.expert.disable_video', disableVideo);
        window.localStorage.setItem('org.doubango.expert.enable_rtcweb_breaker', enableRTCWeb);    
      }
    }

    // sends SIP REGISTER request to login
    function sipRegister() {
      // catch exception for IE (DOM not ready)
      try {
        btnRegister.disabled = true;
        if (!txtRealm || !txtPrivateIdentity || !txtPublicIdentity) {
          txtRegStatus.innerHTML = '<b>Please fill madatory fields (*)</b>';
          btnRegister.disabled = false;
          return;
        }
        var o_impu = tsip_uri.prototype.Parse(txtPublicIdentity);
        if (!o_impu || !o_impu.s_user_name || !o_impu.s_host) {
          txtRegStatus.innerHTML = "<b>[" + txtPublicIdentity + "] is not a valid Public identity</b>";
          btnRegister.disabled = false;
          return;
        }

        // enable notifications if not already done
        if (window.webkitNotifications && window.webkitNotifications.checkPermission() != 0) {
          window.webkitNotifications.requestPermission();
        }

        // save credentials
        saveCredentials();

        // update debug level to be sure new values will be used if the user haven't updated the page
        SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");

        // create SIP stack
        oSipStack = new SIPml.Stack({
          realm: txtRealm,
          impi: txtPrivateIdentity,
          impu: txtPublicIdentity,
          password: txtPassword,
          display_name: txtDisplayName,
          websocket_proxy_url: (window.localStorage ? txtSocketWS : null),
          outbound_proxy_url: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.sip_outboundproxy_url') : null),
          ice_servers: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.ice_servers') : null),
          enable_rtcweb_breaker: (window.localStorage ? enableRTCWeb == "true" : false),
          events_listener: { events: '*', listener: onSipEventStack },
          enable_early_ims: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.disable_early_ims') != "true" : true), // Must be true unless you're using a real IMS network
          enable_media_stream_cache: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.enable_media_caching') == "true" : false),
          bandwidth: (window.localStorage ? tsk_string_to_object(window.localStorage.getItem('org.doubango.expert.bandwidth')) : null), // could be redefined a session-level
          video_size: (window.localStorage ? tsk_string_to_object(window.localStorage.getItem('org.doubango.expert.video_size')) : null), // could be redefined a session-level
          sip_headers: [
            { name: 'User-Agent', value: 'IM-client/OMA1.0 sipML5-v1.2016.03.04' },
            { name: 'Organization', value: 'Doubango Telecom' }
          ]
        }
        );
        if (oSipStack.start() != 0) {
          txtRegStatus.innerHTML = '<b>Failed to start the SIP stack</b>';
        }
        else return;
      }
      catch (e) {
        txtRegStatus.innerHTML = "<b>2:" + e + "</b>";
      }
      btnRegister.disabled = false;
    }

    // sends SIP REGISTER (expires=0) to logout
    function sipUnRegister() {
      if (oSipStack) {
        oSipStack.stop(); // shutdown all sessions
      }
    }

    // makes a call (SIP INVITE)
    function sipCall(s_type) {
      if (oSipStack && !oSipSessionCall && !tsk_string_is_null_or_empty(txtPhoneNumber.value)) {
        if (s_type == 'call-screenshare') {
          if (!SIPml.isScreenShareSupported()) {
            alert('Screen sharing not supported. Are you using chrome 26+?');
            return;
          }
          if (!location.protocol.match('https')) {
            if (confirm("Screen sharing requires https://. Do you want to be redirected?")) {
              sipUnRegister();
              window.location = 'https://ns313841.ovh.net/call.htm';
            }
            return;
          }
        }
        btnCall.disabled = true;
        btnHangUp.disabled = false;

        if (window.localStorage) {
          oConfigCall.bandwidth = tsk_string_to_object(window.localStorage.getItem('org.doubango.expert.bandwidth')); // already defined at stack-level but redifined to use latest values
          oConfigCall.video_size = tsk_string_to_object(window.localStorage.getItem('org.doubango.expert.video_size')); // already defined at stack-level but redifined to use latest values
        }

        // create call session
        oSipSessionCall = oSipStack.newSession(s_type, oConfigCall);
        // make call
        if (oSipSessionCall.call(txtPhoneNumber.value) != 0) {
          oSipSessionCall = null;
          txtCallStatus.value = 'Failed to make call';
          btnCall.disabled = false;
          btnHangUp.disabled = true;
          return;
        }
        saveCallOptions();
      }
      else if (oSipSessionCall) {
        txtCallStatus.innerHTML = '<i>Connecting...</i>';
        oSipSessionCall.accept(oConfigCall);
      }
    }

    // transfers the call
    function sipTransfer() {
      if (oSipSessionCall) {
        var s_destination = prompt('Enter destination number', '');
        if (!tsk_string_is_null_or_empty(s_destination)) {
          btnTransfer.disabled = true;
          if (oSipSessionCall.transfer(s_destination) != 0) {
            txtCallStatus.innerHTML = '<i>Call transfer failed</i>';
            btnTransfer.disabled = false;
            return;
          }
          txtCallStatus.innerHTML = '<i>Transfering the call...</i>';
        }
      }
    }

    // holds or resumes the call
    function sipToggleHoldResume() {
      if (oSipSessionCall) {
        var i_ret;
        btnHoldResume.disabled = true;
        txtCallStatus.innerHTML = oSipSessionCall.bHeld ? '<i>Resuming the call...</i>' : '<i>Holding the call...</i>';
        i_ret = oSipSessionCall.bHeld ? oSipSessionCall.resume() : oSipSessionCall.hold();
        if (i_ret != 0) {
          txtCallStatus.innerHTML = '<i>Hold / Resume failed</i>';
          btnHoldResume.disabled = false;
          return;
        }
      }
    }

    // Mute or Unmute the call
    function sipToggleMute() {
      if (oSipSessionCall) {
        var i_ret;
        var bMute = !oSipSessionCall.bMute;
        txtCallStatus.innerHTML = bMute ? '<i>Mute the call...</i>' : '<i>Unmute the call...</i>';
        i_ret = oSipSessionCall.mute('audio'/*could be 'video'*/, bMute);
        if (i_ret != 0) {
          txtCallStatus.innerHTML = '<i>Mute / Unmute failed</i>';
          return;
        }
        oSipSessionCall.bMute = bMute;
        btnMute.value = bMute ? "Unmute" : "Mute";
      }
    }

    // terminates the call (SIP BYE or CANCEL)
    function sipHangUp() {
      if (oSipSessionCall) {
        txtCallStatus.innerHTML = '<i>Terminating the call...</i>';
        oSipSessionCall.hangup({ events_listener: { events: '*', listener: onSipEventSession } });
      }
    }

    function sipSendDTMF(c) {
      if (oSipSessionCall && c) {
        if (oSipSessionCall.dtmf(c) == 0) {
          try { dtmfTone.play(); } catch (e) { }
        }
      }
    }

    function startRingTone() {
      try { ringtone.play(); }
      catch (e) { }
    }

    function stopRingTone() {
      try { ringtone.pause(); }
      catch (e) { }
    }

    function startRingbackTone() {
      try { ringbacktone.play(); }
      catch (e) { }
    }

    function stopRingbackTone() {
      try { ringbacktone.pause(); }
      catch (e) { }
    }

    function toggleFullScreen() {
      // if (videoRemote.webkitSupportsFullscreen) {
      //   fullScreen(!videoRemote.webkitDisplayingFullscreen);
      // }
      // else {
      fullScreen(!bFullScreen);
      //}
    }

    function fullScreen(b_fs) {
      bFullScreen = b_fs;
      if (tsk_utils_have_webrtc4native() && bFullScreen /*&& videoRemote.webkitSupportsFullscreen*/) {
        /*if (bFullScreen) {
          videoRemote.webkitEnterFullScreen();
        }
        else {
          videoRemote.webkitExitFullscreen();
        }*/
      }
      else {
        if (tsk_utils_have_webrtc4npapi()) {
          try { if (window.__o_display_remote) window.__o_display_remote.setFullScreen(b_fs); }
          catch (e) { divVideo.setAttribute("class", b_fs ? "full-screen" : "normal-screen"); }
        }
        else {
          divVideo.setAttribute("class", b_fs ? "full-screen" : "normal-screen");
        }
      }
    }

    function showNotifICall(s_number) {
      // permission already asked when we registered
      if (window.webkitNotifications && window.webkitNotifications.checkPermission() == 0) {
        if (oNotifICall) {
          oNotifICall.cancel();
        }
        oNotifICall = window.webkitNotifications.createNotification('images/sipml-34x39.png', 'Incaming call', 'Incoming call from ' + s_number);
        oNotifICall.onclose = function () { oNotifICall = null; };
        oNotifICall.show();
      }
    }

    function onKeyUp(evt) {
      evt = (evt || window.event);
      if (evt.keyCode == 27) {
        fullScreen(false);
      }
      else if (evt.ctrlKey && evt.shiftKey) { // CTRL + SHIFT
        if (evt.keyCode == 65 || evt.keyCode == 86) { // A (65) or V (86)
        }
      }
    }

    function onDivCallCtrlMouseMove(evt) {
      try { // IE: DOM not ready
        if (tsk_utils_have_stream()) {
          btnCall.disabled = (!tsk_utils_have_stream() || !oSipSessionRegister || !oSipSessionRegister.is_connected());
          document.getElementById("divCallCtrl").onmousemove = null; // unsubscribe
        }
      }
      catch (e) { }
    }

    function uiOnConnectionEvent(b_connected, b_connecting) { // should be enum: connecting, connected, terminating, terminated
      btnRegister.disabled = b_connected || b_connecting;
      btnUnRegister.disabled = !b_connected && !b_connecting;
      btnCall.disabled = !(b_connected && tsk_utils_have_webrtc() && tsk_utils_have_stream());
      btnHangUp.disabled = !oSipSessionCall;
    }

    function uiBtnCallSetText(s_text) {
      switch (s_text) {
        case "Call":
          {
            btnCall.value = btnCall.innerHTML = 'Llamar';
            btnCall.setAttribute("class", "btn btn-primary");
            btnCall.onclick = function () { sipCall('call-audio'); };
            ulCallOptions.style.visibility = "hidden";
            if (!bDisableCallBtnOptions && ulCallOptions.parentNode != divBtnCallGroup) {
              divBtnCallGroup.appendChild(ulCallOptions);
            }
            else if (bDisableCallBtnOptions && ulCallOptions.parentNode == divBtnCallGroup) {
              document.body.appendChild(ulCallOptions);
            }

            break;
          }
        default:
          {
            btnCall.value = btnCall.innerHTML = s_text;
            btnCall.setAttribute("class", "btn btn-primary");
            btnCall.onclick = function () { sipCall('call-audio'); };
            ulCallOptions.style.visibility = "hidden";
            if (ulCallOptions.parentNode == divBtnCallGroup) {
              document.body.appendChild(ulCallOptions);
            }
            break;
          }
      }
    }

    function uiCallTerminated(s_description) {
      uiBtnCallSetText("Call");
      btnHangUp.value = 'HangUp';
      btnHoldResume.value = 'hold';
      btnMute.value = "Mute";
      btnCall.disabled = false;
      btnHangUp.disabled = true;
      if (window.btnBFCP) window.btnBFCP.disabled = true;

      oSipSessionCall = null;

      stopRingbackTone();
      stopRingTone();

      txtCallStatus.innerHTML = "<i>" + s_description + "</i>";
      divCallOptions.style.opacity = 0;

      if (oNotifICall) {
        oNotifICall.cancel();
        oNotifICall = null;
      }

      setTimeout(function () { if (!oSipSessionCall) txtCallStatus.innerHTML = ''; }, 2500);
    }

    // Callback function for SIP Stacks
    function onSipEventStack(e /*SIPml.Stack.Event*/) {
      tsk_utils_log_info('==stack event = ' + e.type);
      switch (e.type) {
        case 'started':
          {
            // catch exception for IE (DOM not ready)
            try {
              // LogIn (REGISTER) as soon as the stack finish starting
              oSipSessionRegister = this.newSession('register', {
                expires: 200,
                events_listener: { events: '*', listener: onSipEventSession },
                sip_caps: [
                  { name: '+g.oma.sip-im', value: null },
                  //{ name: '+sip.ice' }, // rfc5768: FIXME doesn't work with Polycom TelePresence
                  { name: '+audio', value: null },
                  { name: 'language', value: '\"en,fr\"' }
                ]
              });
              oSipSessionRegister.register();
            }
            catch (e) {
              txtRegStatus.value = txtRegStatus.innerHTML = "<b>1:" + e + "</b>";
              btnRegister.disabled = false;
            }
            break;
          }
        case 'stopping': case 'stopped': case 'failed_to_start': case 'failed_to_stop':
          {
            var bFailure = (e.type == 'failed_to_start') || (e.type == 'failed_to_stop');
            oSipStack = null;
            oSipSessionRegister = null;
            oSipSessionCall = null;

            uiOnConnectionEvent(false, false);

            stopRingbackTone();
            stopRingTone();

            divCallOptions.style.opacity = 0;

            txtCallStatus.innerHTML = '';
            txtRegStatus.innerHTML = bFailure ? "<i>Desconectado: <b>" + e.description + "</b></i>" : "<i>Desconectado</i>";
            break;
          }

        case 'i_new_call':
          {
            if (oSipSessionCall) {
              // do not accept the incoming call if we're already 'in call'
              e.newSession.hangup(); // comment this line for multi-line support
            }
            else {
              oSipSessionCall = e.newSession;
              // start listening for events
              oSipSessionCall.setConfiguration(oConfigCall);

              uiBtnCallSetText('Contestar');
              btnHangUp.value = 'Reject';
              btnCall.disabled = false;
              btnHangUp.disabled = false;

              startRingTone();

              var sRemoteNumber = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
              txtCallStatus.innerHTML = "<i>Llamada entrante de [<b>" + sRemoteNumber + "</b>]</i>";
              showNotifICall(sRemoteNumber);
            }
            break;
          }

        case 'm_permission_requested':
          {
            divGlassPanel.style.visibility = 'visible';
            break;
          }
        case 'm_permission_accepted':
        case 'm_permission_refused':
          {
            divGlassPanel.style.visibility = 'hidden';
            if (e.type == 'm_permission_refused') {
              uiCallTerminated('Media stream permission denied');
            }
            break;
          }

        case 'starting': default: break;
      }
    };

    // Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
    function onSipEventSession(e /* SIPml.Session.Event */) {
      tsk_utils_log_info('==session event = ' + e.type);

      switch (e.type) {
        case 'connecting': case 'connected':
          {
            var bConnected = (e.type == 'connected');
            if (e.session == oSipSessionRegister) {
              uiOnConnectionEvent(bConnected, !bConnected);
              txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
            }
            else if (e.session == oSipSessionCall) {
              btnHangUp.value = 'HangUp';
              btnCall.disabled = true;
              btnHangUp.disabled = false;
              btnTransfer.disabled = false;
              if (window.btnBFCP) window.btnBFCP.disabled = false;

              if (bConnected) {
                stopRingbackTone();
                stopRingTone();

                if (oNotifICall) {
                  oNotifICall.cancel();
                  oNotifICall = null;
                }
              }

              txtCallStatus.innerHTML = "<i>" + e.description + "</i>";
              divCallOptions.style.opacity = bConnected ? 1 : 0;
            }
            break;
          } // 'connecting' | 'connected'
        case 'terminating': case 'terminated':
          {
            if (e.session == oSipSessionRegister) {
              uiOnConnectionEvent(false, false);

              oSipSessionCall = null;
              oSipSessionRegister = null;

              txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
            }
            else if (e.session == oSipSessionCall) {
              uiCallTerminated(e.description);
            }
            break;
          } // 'terminating' | 'terminated'

        case 'm_stream_audio_local_added':
        case 'm_stream_audio_local_removed':
        case 'm_stream_audio_remote_added':
        case 'm_stream_audio_remote_removed':
          {
            break;
          }

        case 'i_ect_new_call':
          {
            oSipSessionTransferCall = e.session;
            break;
          }

        case 'i_ao_request':
          {
            if (e.session == oSipSessionCall) {
              var iSipResponseCode = e.getSipResponseCode();
              if (iSipResponseCode == 180 || iSipResponseCode == 183) {
                startRingbackTone();
                txtCallStatus.innerHTML = '<i>Remote ringing...</i>';
              }
            }
            break;
          }

        case 'm_early_media':
          {
            if (e.session == oSipSessionCall) {
              stopRingbackTone();
              stopRingTone();
              txtCallStatus.innerHTML = '<i>Early media started</i>';
            }
            break;
          }

        case 'm_local_hold_ok':
          {
            if (e.session == oSipSessionCall) {
              if (oSipSessionCall.bTransfering) {
                oSipSessionCall.bTransfering = false;
                // this.AVSession.TransferCall(this.transferUri);
              }
              btnHoldResume.value = 'Resume';
              btnHoldResume.disabled = false;
              txtCallStatus.innerHTML = '<i>Call placed on hold</i>';
              oSipSessionCall.bHeld = true;
            }
            break;
          }
        case 'm_local_hold_nok':
          {
            if (e.session == oSipSessionCall) {
              oSipSessionCall.bTransfering = false;
              btnHoldResume.value = 'Hold';
              btnHoldResume.disabled = false;
              txtCallStatus.innerHTML = '<i>Failed to place remote party on hold</i>';
            }
            break;
          }
        case 'm_local_resume_ok':
          {
            if (e.session == oSipSessionCall) {
              oSipSessionCall.bTransfering = false;
              btnHoldResume.value = 'Hold';
              btnHoldResume.disabled = false;
              txtCallStatus.innerHTML = '<i>Call taken off hold</i>';
              oSipSessionCall.bHeld = false;
            }
            break;
          }
        case 'm_local_resume_nok':
          {
            if (e.session == oSipSessionCall) {
              oSipSessionCall.bTransfering = false;
              btnHoldResume.disabled = false;
              txtCallStatus.innerHTML = '<i>Failed to unhold call</i>';
            }
            break;
          }
        case 'm_remote_hold':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = '<i>Placed on hold by remote party</i>';
            }
            break;
          }
        case 'm_remote_resume':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = '<i>Taken off hold by remote party</i>';
            }
            break;
          }
        case 'm_bfcp_info':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = 'BFCP Info: <i>' + e.description + '</i>';
            }
            break;
          }

        case 'o_ect_trying':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = '<i>Call transfer in progress...</i>';
            }
            break;
          }
        case 'o_ect_accepted':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = '<i>Call transfer accepted</i>';
            }
            break;
          }
        case 'o_ect_completed':
        case 'i_ect_completed':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = '<i>Call transfer completed</i>';
              btnTransfer.disabled = false;
              if (oSipSessionTransferCall) {
                oSipSessionCall = oSipSessionTransferCall;
              }
              oSipSessionTransferCall = null;
            }
            break;
          }
        case 'o_ect_failed':
        case 'i_ect_failed':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = '<i>Call transfer failed</i>';
              btnTransfer.disabled = false;
            }
            break;
          }
        case 'o_ect_notify':
        case 'i_ect_notify':
          {
            if (e.session == oSipSessionCall) {
              txtCallStatus.innerHTML = "<i>Call Transfer: <b>" + e.getSipResponseCode() + " " + e.description + "</b></i>";
              if (e.getSipResponseCode() >= 300) {
                if (oSipSessionCall.bHeld) {
                  oSipSessionCall.resume();
                }
                btnTransfer.disabled = false;
              }
            }
            break;
          }
        case 'i_ect_requested':
          {
            if (e.session == oSipSessionCall) {
              var s_message = "Do you accept call transfer to [" + e.getTransferDestinationFriendlyName() + "]?";//FIXME
              if (confirm(s_message)) {
                txtCallStatus.innerHTML = "<i>Call transfer in progress...</i>";
                oSipSessionCall.acceptTransfer();
                break;
              }
              oSipSessionCall.rejectTransfer();
            }
            break;
          }
      }
    }

</script>

</head>

<body onload="inicializar()" style="background-color:white;">
    <img src="https://www.sap.com/dam/application/shared/logos/sap-logo-svg.svg" />
    <hr style="color:gold;font-size:65px" />
    <p style="font-family:verdana;color:black;font-size:18px">
        <br />SAP Service Cloud CTI Integration Main Page<br />
        <br />
        <br />
    </p>
    <hr style="color:gold;font-size:65px">
    <!-- <a href="http://go.sap.com/product/crm/cloud-customer-engagement.html">About SAP Cloud</a> -->

<div id="myDiv"></div>

<div class="container">
    <div class="row-fluid">
      <div class="span4 well">
        <label style="width: 100%;" align="center" id="txtRegStatus">
        </label>
        <h2>
          Login
        </h2>
        <br />
        <table style='width: 100%'>
          <tr>
            <td colspan="2" align="right">
              <input type="button" class="btn btn-success" id="btnRegister" value="LogIn" disabled
                onclick='sipRegister();' />
              &nbsp;
              <input type="button" class="btn btn-danger" id="btnUnRegister" value="LogOut" disabled
                onclick='sipUnRegister();' />
            </td>
          </tr>
          <tr>
            <td colspan="3">
              <a class="" href="./expert.htm" target="_blank">Configuración Avanzada</a>
            </td>
          </tr>
        </table>
      </div>
    </div>
    <div class="row-fluid">
      <div id="divCallCtrl" class="span7 well" style='display:table-cell; vertical-align:middle'>
        <label style="width: 100%;" align="center" id="txtCallStatus">
        </label>
        <h2>
          Call control
        </h2>
        <br />
        <table style='width: 100%;'>
          <tr>
            <td style="white-space:nowrap;">
              <input type="text" style="width: 100%; height:100%;" id="txtPhoneNumber" value=""
                placeholder="Enter phone number to call" />
            </td>
          </tr>
          <tr>
            <td colspan="1" align="right">
              <div class="btn-toolbar" style="margin: 0; vertical-align:middle">
                <div id="divBtnCallGroup" class="btn-group">
                  <button id="btnCall" disabled class="btn btn-primary" data-toggle="dropdown">Llamar</button>
                </div>&nbsp;&nbsp;
                <div class="btn-group">
                  <input type="button" id="btnHangUp" style="margin: 0; vertical-align:middle; height: 100%;"
                    class="btn btn-primary" value="HangUp" onclick='sipHangUp();' disabled />
                </div>
              </div>
            </td>
          </tr>
          <tr>
            <td align='center'>
              <div id='divCallOptions' class='call-options' style='opacity: 0; margin-top: 0px'>
                <input type="button" class="btn" style="" id="btnFullScreen" value="FullScreen" disabled
                  onclick='toggleFullScreen();' /> &nbsp;
                <input type="button" class="btn" style="" id="btnMute" value="Mute" onclick='sipToggleMute();' /> &nbsp;
                <input type="button" class="btn" style="" id="btnHoldResume" value="Hold"
                  onclick='sipToggleHoldResume();' /> &nbsp;
                <input type="button" class="btn" style="" id="btnTransfer" value="Transfer" onclick='sipTransfer();' />
                &nbsp;
                <!-- <input type="button" class="btn" style="" id="btnKeyPad" value="KeyPad" onclick='openKeyPad();' /> -->
              </div>
            </td>
          </tr>
        </table>
      </div>
    </div>

    <br />
    <footer>

      <!-- <p>
        &copy; Doubango Telecom 2012-2018 <br />
        <i>Inspiring the future</i>
      </p> -->
      <!-- Creates all ATL/COM objects right now
            Will open confirmation dialogs if not already done
        -->
      <!--object id="fakeVideoDisplay" classid="clsid:5C2C407B-09D9-449B-BB83-C39B7802A684" style="visibility:hidden;"> </object-->
      <!--object id="fakeLooper" classid="clsid:7082C446-54A8-4280-A18D-54143846211A" style="visibility:visible; width:0px; height:0px"> </object-->
      <!--object id="fakeSessionDescription" classid="clsid:DBA9F8E2-F9FB-47CF-8797-986A69A1CA9C" style="visibility:hidden;"> </object-->
      <!--object id="fakeNetTransport" classid="clsid:5A7D84EC-382C-4844-AB3A-9825DBE30DAE" style="visibility:hidden;"> </object-->
      <!--object id="fakePeerConnection" classid="clsid:56D10AD3-8F52-4AA4-854B-41F4D6F9CEA3" style="visibility:hidden;"> </object-->
      <object id="fakePluginInstance" classid="clsid:69E4A9D1-824C-40DA-9680-C7424A27B6A0" style="visibility:hidden;">
      </object>

      <!--
            NPAPI  browsers: Safari, Opera and Firefox
        -->
      <!--embed id="WebRtc4npapi" type="application/w4a" width='1' height='1' style='visibility:hidden;' /-->
    </footer>
  </div>
  <!-- /container -->
  <!-- Glass Panel -->
  <div id='divGlassPanel' class='glass-panel' style='visibility:hidden'></div>
  <!-- KeyPad Div -->
  </div> -->
  <!-- Call button options -->
  <ul id="ulCallOptions" class="dropdown-menu" style="visibility:hidden">
    <li><a href="#" onclick='sipCall("call-audio");'>Audio</a></li>
  </ul>

  <!-- Le javascript
================================================== -->
  <!-- Placed at the end of the document so the pages load faster -->
  <script type="text/javascript" src="https://sources.crisan52.now.sh/assets/js/jquery.js"></script>
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-transition.js"></script> -->
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-alert.js"></script> -->
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-modal.js"></script> -->
  <script type="text/javascript" src="https://sources.crisan52.now.sh/assets/js/bootstrap-dropdown.js"></script>
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-scrollspy.js"></script> -->
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-tab.js"></script> -->
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-tooltip.js"></script> -->
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-popover.js"></script> -->
  <script type="text/javascript" src="https://sources.crisan52.now.sh/assets/js/bootstrap-button.js"></script>
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-collapse.js"></script> -->
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-carousel.js"></script> -->
  <!-- <script type="text/javascript" src="./assets/js/bootstrap-typeahead.js"></script>  -->

  <!-- Audios -->
  <audio id="audio_remote" autoplay="autoplay"> </audio>
  <audio id="ringtone" loop src="sounds/ringtone.wav"> </audio>
  <audio id="ringbacktone" loop src="sounds/ringbacktone.wav"> </audio>
  <audio id="dtmfTone" src="sounds/dtmf.wav"> </audio>

</body>
</html>

